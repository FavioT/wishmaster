#!/usr/bin/env node

const vorpal    = require('vorpal')();
const chalk     = require('chalk');

const { getBooks, getMovies, getGames, newBook, newMovie, newGame } = require('./logic.js');


vorpal
    .command('book <option>')
    .option('get', 'Print foobar instead')
    .option('new', 'Print foobar instead')
    .option('complete', 'Print foobar instead')
    .description('Outputs bar')
    .action(function(args, callback) {
        const self = this;
        switch (args.option) {
            case 'new':                
                return this.prompt({
                    type: 'input',
                    name: 'sentence',
                    message: chalk.yellow('Type in your wish -> '),
                }, function (result) {
                    if (result.sentence) {
                        newItem(result.sentence);
                        callback();
                    } else {
                        self.log('Please provide an answer');
                        callback();
                    }
                });
                callback();
                break;

            case 'get':
                getItem();
                callback();
                break;

            case 'complete':
                if (args.id) {
                    completeItem(args.id);
                } else {
                    self.log('Please provide an option');
                }
                callback();
                break;

            default:
                break;
        }
        callback();
    })

vorpal
    .command('new', 'Used to create a new wish') 
    .action(function (args, callback) {
        const self = this;
        return this.prompt({
            type:       'list',
            name:       'option',
            choices:    ['books', 'movies', 'games'],
            message:    'What list do you want to show?'
        }, function (result) {
            switch(result.option) {
                case 'books':
                    self.prompt({
                        type:       'input',
                        name:       'sentence',
                        message:    chalk.yellow('Type in your wish -> '),
                    }, function (result) {
                        if (result.sentence) {
                            newBook(result.sentence);
                            self.log(chalk.green('Book wish created successfully!'));
                        } else {
                            self.log(chalk.red('Please provide an answer'));
                        }
                    });
                    callback();
                    return;
                    break;

                case 'movies':
                    self.prompt({
                        type:       'input',
                        name:       'sentence',
                        message:    chalk.yellow('Type in your wish -> '),
                    }, function (result) {
                        if (result.sentence) {
                            newMovie(result.sentence);
                            self.log(chalk.green('Movie wish created successfully!'));
                        } else {
                            self.log(chalk.red('Please provide an answer'));
                        }
                    });
                    callback();
                    break;

                case 'games':
                    self.prompt({
                        type:       'input',
                        name:       'sentence',
                        message:    chalk.yellow('Type in your wish -> '),
                    }, function (result) {
                        if (result.sentence) {
                            newGame(result.sentence);
                            self.log(chalk.green('Game wish created successfully!'));
                        } else {
                            self.log(chalk.red('Please provide an answer'));
                        }
                    });
                    callback();
                    break;

                default:
                    self.log(result);
                    break;
            }
            
        });
    });

vorpal
    .command('get', 'Used to retrieve your wishlist')
    .action(function (args, callback) {
        const self = this;
        return this.prompt({
            type: 'list',
            name: 'option',
            choices: ['books', 'movies', 'games'],
            message: 'What list do you want to show?'
        }, function (result) {
            switch(result.option) {
                case 'books':
                    getBooks();
                    break;

                case 'movies':
                    getMovies();
                    callback();
                    break;

                case 'games':
                    getGames();
                    callback();
                    break;

                default:
                    self.log(result);
                    break;
            }
            callback();
        });
    });

vorpal
    .command('complete [id]', 'Used to mark a wish as complete')
    .action(function (args, callback) {
        if (args.id) {
            completeItem(args.id);
        } else {
            self.log('Please provide an option');
        }
        callback();
    });

vorpal.command('destroy database')
    .action(function (args, callback) {
        const self = this;
        return this.prompt({
            type: 'confirm',
            name: 'continue',
            default: false,
            message: 'That sounds like a really bad idea. Continue?',
        }, function (result) {
            if (!result.continue) {
                self.log('Good move.');
                callback();
            } else {
                self.log('Time to dust off that resume.');
                callback();
            }
        });
    });

vorpal
    .delimiter('wish-master$')
    .show();